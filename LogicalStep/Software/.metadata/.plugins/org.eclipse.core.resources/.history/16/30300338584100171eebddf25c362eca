/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"


/*
static void button_ISR(void* context, alt_u32 id)
{
	// do things
	// code
	buttons = IORD(BUTTON_PIO_BASE, 0);

	// make sure to clear the interrupt
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
	IOWR(LED_PIO_BASE,0, ~buttons&0x0F);
}*/

volatile int background_counter;

static void stimulus_ISR(void* context, alt_u32 id)
{
	// do things
	// code
	IOWR( RESPONSE_OUT_BASE, 0, 1);
	IOWR( RESPONSE_OUT_BASE, 0, 0);
	background();

	// make sure to clear the interrupt
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
}


int main()
{
	// Initializing stimulus ISR
	IOWR(STIMULUS_IN_BASE, 3, 0x0);
	alt_irq_register( STIMULUS_IN_BASE, (void *)0, stimulus_ISR );
	IOWR(STIMULUS_IN_BASE, 2, 0x1);

	int latency;
	int busy;
	int pulses_missed;
	for(int i=0; i < 2500; i++)
	{
		// Initializing EGM: period, pulse width, enable
		IOWR( EGM_BASE, 2, (i+1)*2);
		IOWR( EGM_BASE, 3, i+1);
		IOWR( EGM_BASE, 0, 1);

		// Wait until the EGM is done running before reading
		while( IORD( EGM_BASE, 1) == 1)
		{}
		latency = IORD( EGM_BASE, 4);
		pulses_missed = IORD( EGM_BASE, 5);

		// Send our data to the console
		printf(i+1); // pulse width
		printf(latency);

		// Reset EGM
		IOWR( EGM_BASE, 0, 0);
	}

	return 0;
}

int background()
{
	int j;
	int x = 0;
	int grainsize = 4;
	int g_taskProcessed = 0;
	for(j = 0; j < grainsize; j++)
	{
		g_taskProcessed++;
	}
	background_counter++;
	return x;
}
